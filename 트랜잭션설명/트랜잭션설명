Transation
﻿
· 트랜잭션의 개념 : 어떤 일련의 작업의 의미임(한번에 이루어져야 하는 작업 단위) 
· 모두 에러 없이 끝나야 하며, 만약 중간에 에러가 발생한다면, 에러 발생 이전 시점까지 작업되었던 내용은 모두 원상복구 되어야 함. 
· 트랜잭션은 에러처리가 아니고, 에러발생시 DB로 하여금 원상복구하도록 DB에 요청하는 것임 
   ex) 에러 : 500(코딩이 잘못되었을 때 뜨는 에러 - 내부에러), 404(페이지 없을때 뜨는 에러), 403(권한에러) 
· 가장 대표적인 예는 계좌이체(입금+ 출금) - 오류없이 완벽하게 이루어져야함  

☞commit(커밋): 해당 Connection의 요청을 완료하고 특별한 에러가 없다면 결과를 DB에 반영한다 
☞RollBack(롤백): 해당 Connection 수행 중 예기치 않은 에러가 발생했다면 모든 과정을 취소하고 
                                   DB를 Connection이 수행되지 이전상태로 변경한다 
                 
﻿· SQL에서 반드시 commit(커밋)을 해야하는 명령문 
→ insert delete update ☞ 트랜잭션의 대상이 된다.       

﻿· spring context 설정파일에서 Transaction을 사용하는 방법
1) spring context 설정파일에서 Transaction 선언 
2) spring Transaction Annotation 을 사용한 Transaction 선언 ☞  사용하는 게 좋다 
3) spring API를 사용하여 프로그램 소스 상에 Transaction 구현 

→  1)과 2)는 spring AOP를 사용하는 것이고,  3)은 AOP가 아는 순수 spring API를 사용하는 방법이다. 
→ 어쩔 수 없이 프로그램에 의한 트랜잭션을 사용해야 할 경우를 제외하고,
    최대한 선언적인 트랜잭션 방식으로 프로그램을 설계해야 한다. 
→  3가지 방식 모두 설정해서 사용해도 된다. 하지만 무조건 통일적인 방식으로 할것 


- 트랜잭션 우선순위는 메소드 > 클래스 > 인터페이스 메소드 > 인터페이스 순    

============================================================================================
controller -> service(비즈니스로직) -> mapper, dao, repositoty -> DB 

@Transactional은 controller에서 쓰면 안된다. 
                                   비지니스 로직에 안에서 transactional(service단)이 이뤄져야함
-선언적 트랜잭션에서는 런타임 예외가 발생하면 롤백한다    
-반면에 예외가 전혀 발생하지 않거나 체크 예외가 발생하면 커밋한다 (롤백하지 않는다)
-rollbackFor를 통해서 컴파일 예외를 처리할 수 있다.
 @Transactional(rollbackFor = Exception.class
